---
- name: "Install Python3 and Docker dependencies on host"
  apt:
    name:
      - python3-apt
      - python3-docker
      - python3-pip
      - golang-go
      - apt-transport-https
      - ca-certificates
      - curl
      - gnupg-agent
      - software-properties-common
    state: present
    update_cache: yes
  tags: setup

- name: "Install python openshift client"
  pip:
    name: openshift
  tags: setup

- name: "Add Docker repo key to apt"
  apt_key:
    url: https://download.docker.com/linux/ubuntu/gpg
  tags: setup

- name: "Add docker repo to apt"
  apt_repository:
    repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu bionic stable
    filename: docker
    state: present
    update_cache: yes
  tags: setup

- name: "Install Docker"
  apt:
    name:
      - docker-ce
      - docker-ce-cli
    state: present
    update_cache: yes
  tags: setup

- name: "Create Jenkins group"
  group:
    name: jenkins
    state: present
  tags: setup

- name: "Create Jenkins user"
  user:
    name: jenkins
    append: yes
    groups:
      - docker
      - jenkins
  tags: setup

- name: "Systemd enable docker"
  systemd:
    name: docker
    enabled: yes
    state: reloaded
  tags: setup

- name: "Check if docker credential helper exists"
  stat:
    path: /usr/local/bin/docker-credential-ecr-login
  register: cred_helper
  tags: setup

- name: "Build amazon-ecr-credential-helper"
  become: yes
  become_user: jenkins
  shell:
    cmd: go get -u github.com/awslabs/amazon-ecr-credential-helper/ecr-login/cli/docker-credential-ecr-login
  when: cred_helper.stat.exists == 'false'
  tags: setup

- name: "Check if aws-iam-authenticator exists"
  stat:
    path: /usr/local/bin/aws-iam-authenticator
  register: iam_authenticator
  tags: setup

- name: "Install aws-iam-authenticator"
  get_url:
    url: https://amazon-eks.s3.us-west-2.amazonaws.com/1.15.10/2020-02-22/bin/linux/amd64/aws-iam-authenticator
    dest: /usr/local/bin/aws-iam-authenticator
    mode: '0755'
  tags: setup

- name: "Update facts"
  become: yes
  become_user: jenkins
  setup:
  tags: setup

- name: "Install docker credential-helper"
  copy:
    src: "{{ ansible_user_dir }}/go/bin/docker-credential-ecr-login"
    dest: /usr/local/bin/docker-credential-ecr-login
    mode: '0755'
    remote_src: yes
  tags: setup

- name: "Create docker-credential-helper directory"
  file:
    path: "{{ ansible_user_dir }}/.docker"
    state: directory
    mode: '0755'
    owner: 'jenkins'
    group: 'jenkins'
  tags: setup

- name: "Write docker-credential-helper config file"
  become: yes
  become_user: jenkins
  copy:
    content: '{ "credsStore": "ecr-login" }'
    dest: "{{ ansible_user_dir }}/.docker/config.json"
    mode: '0644'
    remote_src: yes
  tags: setup

- name: "Fetch Hadolint docker image"
  docker_image:
    name: hadolint/hadolint
    source: pull
  tags: setup

- name: "Get EC2 metadata facts"
  ec2_metadata_facts:
  tags:
    - push
    - deploy

- name: "Build microblog docker image"
  docker_image:
    name: microblog
    tag: latest
    source: build
    state: present
    build:
      path: ../
      pull: yes
  tags: build

- name: "Create ECR repository"
  ecs_ecr:
    aws_access_key: "{{ ansible_facts['ec2_iam_security_credentials_' + ansible_facts['ec2_iam_instance_profile_role']\
    | regex_replace('-','_') + '_accesskeyid'] }}"
    aws_secret_key: "{{ ansible_facts['ec2_iam_security_credentials_' + ansible_facts['ec2_iam_instance_profile_role']\
    | regex_replace('-','_') + '_secretaccesskey'] }}"
    security_token: "{{ ansible_facts['ec2_iam_security_credentials_' + ansible_facts['ec2_iam_instance_profile_role']\
    | regex_replace('-','_') + '_token'] }}"
    name: udacity/microblog
    state: present
    region: "{{ ansible_facts.ec2_placement_region }}"
  register: ecr_repo
  tags:
    - push
    - deploy

- name: Push image to ECR.
  become: yes
  become_user: jenkins
  command: "{{ 'docker push '+ ecr_repo.repository.repositoryUri + ':latest' }}"
  register: push_result
  changed_when: true
  until: push_result is success
  retries: 10
  delay: 2
  tags: push

- name: Create k8s VPC
  cloudformation:
      stack_name: microblog-vpc-stack
      template: roles/buildservers/files/cloudformation/vpc.yml
      role_arn: "{{ ansible_facts.ec2_iam_info_instanceprofilearn | regex_replace('instance-profile', 'role') }}"
      region: "{{ ansible_facts.ec2_placement_region }}"
      state: present
      template_parameters:
          ClusterName: eks-microblog
  register: vpc_info
  tags: deploy

- name: "Updating stack outputs"
  set_fact:
      stack_outputs: "{{ vpc_info['stack_outputs'] }}"
  tags: deploy

- name: Create k8s Cluster
  cloudformation:
      stack_name: microblog-cluster-stack
      template: roles/buildservers/files/cloudformation/eks-cluster.yml
      region: "{{ ansible_facts.ec2_placement_region }}"
      state: present
      template_parameters:
          ClusterName: eks-microblog
          VPCId: "{{ stack_outputs.VPC }}"
          Subnets: "{{ stack_outputs.Subnets }}"
  register: eks_cluster
  tags: deploy

- name: "Updating stack outputs"
  set_fact:
      stack_outputs: "{{ stack_outputs | combine(eks_cluster['stack_outputs']) }}"
  tags: deploy

- name: Create k8s nodegroup
  cloudformation:
      stack_name: microblog-nodegroup-stack
      template: roles/buildservers/files/cloudformation/eks-nodegroup.yml
      region: "{{ ansible_facts.ec2_placement_region }}"
      state: present
      template_parameters:
          ClusterName: eks-microblog
          ASGSubnets: "{{ stack_outputs.Subnets }}"
  register: eks_nodegroup
  tags: deploy

- name: "Gather EKS stack info"
  cloudformation_info:
      stack_name: microblog-vpc-stack
      region: "{{ ansible_facts.ec2_placement_region }}"
  register: eks_info
  tags: deploy

- name: "Gather facts as Jenkins user"
  become: yes
  become_user: jenkins
  setup:
  tags: deploy

- name: "Create kubeconfig config directory"
  become: yes
  become_user: jenkins
  file:
      path: "{{ ansible_user_dir + '/.kube' }}"
      state: directory
      owner: jenkins
      group: jenkins
      mode: '0755'
  tags: deploy

- name: "Deploy KubeConfig"
  become: yes
  become_user: jenkins
  template:
      src: kubeconfig.j2
      dest: "{{ ansible_user_dir + '/.kube/kubeconfig' }}"
      owner: jenkins
      group: jenkins
      mode: '0644'
  tags: deploy

- name: "Create K8s config file"
  become: yes
  become_user: jenkins
  template:
    src: 'roles/buildservers/templates/k8s/microblog-app.yml'
    dest: "{{ ansible_user_dir + '/microblog-app.yml' }}"
    owner: jenkins
    group: jenkins
    mode: '0644'
  tags: deploy          

- name: "Create K8s deployment"
  become: yes
  become_user: jenkins
  k8s:
    state: present
    src: "{{ ansible_user_dir + '/microblog-app.yml' }}"
  tags: deploy